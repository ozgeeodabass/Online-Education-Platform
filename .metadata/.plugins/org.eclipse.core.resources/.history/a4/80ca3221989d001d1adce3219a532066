package ceng.gradProject.business.concretes;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import ceng.gradProject.business.abstracts.InstructorService;
import ceng.gradProject.core.utilities.results.DataResult;
import ceng.gradProject.core.utilities.results.Result;
import ceng.gradProject.core.utilities.results.SuccessDataResult;
import ceng.gradProject.core.utilities.results.SuccessResult;
import ceng.gradProject.dataAccess.abstracts.InstructorRepository;
import ceng.gradProject.entities.concretes.Course;
import ceng.gradProject.entities.concretes.Instructor;

@Service
public class InstructorManager implements InstructorService {
	
	private InstructorRepository instructorRepository;

	public InstructorManager(InstructorRepository instructorRepository) {
		super();
		this.instructorRepository = instructorRepository;
	}

	@Override
	public DataResult<Instructor> getByName(String fName, String lName) {
		Instructor instr = instructorRepository.getByName(fName, lName);
		Instructor instrResponse = new Instructor();
	
		instrResponse.setInstrId(instr.getInstrId());
		instrResponse.setInstrFirstName(instr.getInstrFirstName());
		instrResponse.setInstrLastName(instr.getInstrLastName());
			

		return new SuccessDataResult<Instructor>(instrResponse,"Eğitmen Listelendi");
	}

	@Override
	public DataResult<List<Instructor>> getAll() {
		List<Instructor> intrs = instructorRepository.findAll();
		List<Instructor> intrsResponse = new ArrayList<Instructor>();
		
		for (Instructor instr : intrs) {
			Instructor responseItem = new Instructor();
			responseItem.setInstrId(instr.getInstrId());
			responseItem.setInstrFirstName(instr.getInstrFirstName());
			responseItem.setInstrLastName(instr.getInstrLastName());
			
			intrsResponse.add(responseItem);
			
		}
		return new SuccessDataResult<List<Instructor>>(intrsResponse,"Eğitmenler Listelendi");
	}

	@Override
	public Result add(Instructor instr) {
		instr.setInstrFirstName(instr.getInstrFirstName());
		instr.setInstrLastName(instr.getInstrLastName());
		
		this.instructorRepository.save(instr);
		return new SuccessResult("Eğitmen Eklendi");
	}

	@Override
	public Result delete(Instructor instr) {
		this.instructorRepository.delete(instr);
		return new SuccessResult("Eğitmen Silindi");
	}

	@Override
	public List<Instructor> getByDepartment(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DataResult<Instructor> update(Instructor instr) {
		int id = instr.getInstrId();
		Course courseExist = this.courseRepository.findById(id).get();
		courseExist.setCourseTitle(course.getCourseTitle());
		courseExist.setCourseDescription(course.getCourseDescription());
		courseExist.setDepartment(course.getDepartment());
		courseExist.setInstructor(course.getInstructor());
		courseExist.setSubject(course.getSubject());
		
		return new SuccessDataResult<Course>(course, "Kurs Güncellendi");
	}

}
